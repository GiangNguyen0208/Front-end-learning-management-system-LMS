import {
  Card,
  Table,
  Button,
  Upload,
  Modal,
  Typography,
  Space,
  Tooltip,
} from "antd";
import {
  EyeOutlined,
  CloudDownloadOutlined,
  FileAddOutlined,
  UploadOutlined,
} from "@ant-design/icons";
import { useState, useEffect, useRef, useContext } from "react";
import { useLocation, useParams } from "react-router-dom";
import assignmentApi from "../../../../../api/assignmentApi";
import { toast } from "react-toastify";
import { formatDate } from "../../../../../utils/helper/formatDate";
import { jsPDF } from "jspdf";
import html2canvas from "html2canvas";
import { AuthContext } from "../../../../../context/AuthProvider";

const { Text, Paragraph } = Typography;

const MyCourseAssignments = () => {
  const location = useLocation();
  const { id } = useParams();
  const booking = location.state ? location.state : null;
  const courseId = booking?.courseBooking?.course?.id || id;
  const { user } = useContext(AuthContext);

  const [assignments, setAssignments] = useState([]);
  const [loading, setLoading] = useState(false);

  // Modal xem chi ti·∫øt file
  const [isViewModalOpen, setIsViewModalOpen] = useState(false);
  const [viewingAssignment, setViewingAssignment] = useState(null);

  // Modal n·ªôp b√†i
  const [isSubmitModalOpen, setIsSubmitModalOpen] = useState(false);
  const [submittingAssignment, setSubmittingAssignment] = useState(null);
  const [submitFile, setSubmitFile] = useState(null);

  // Ref ph·∫ßn n·ªôi dung modal ƒë·ªÉ t·∫°o PDF
  const contentRef = useRef();

  useEffect(() => {
    if (courseId) fetchAssignments();
  }, [courseId]);

  const fetchAssignments = async () => {
    setLoading(true);
    try {
      const res = await assignmentApi.fetchAllAssignments(courseId);
      console.log(res.data);
      setAssignments(res.data || []);
    } catch (err) {
      toast.error("L·ªói t·∫£i danh s√°ch b√†i t·∫≠p.");
    } finally {
      setLoading(false);
    }
  };

  // M·ªü modal xem chi ti·∫øt
  const handleViewDetails = (record) => {
    setViewingAssignment(record);
    setIsViewModalOpen(true);
  };

  // M·ªü modal n·ªôp b√†i
  const handleOpenSubmitModal = (record) => {
    setSubmittingAssignment(record);
    setSubmitFile(null);
    setIsSubmitModalOpen(true);
  };

  // N·ªôp b√†i t·∫≠p (upload file)
  const handleSubmitAssignment = async () => {
    if (!submitFile) {
      toast.warning("Vui l√≤ng ch·ªçn file ƒë·ªÉ n·ªôp.");
      return;
    }

    const formData = new FormData();
    formData.append("studentId", user.id);
    formData.append("assignmentId", submittingAssignment.id);

    console.log(submitFile instanceof File);
    console.log("submissionFile ", submitFile);
    
    if (submitFile) {
        formData.append("submissionFile", submitFile.originFileObj ?? submitFile);
    }

    try {
      const response = await assignmentApi.submitAssignment(formData); // API n·ªôp b√†i
      console.log("N·ªôp b√†i ", response.data);
      if (response.data) {
        toast.success("N·ªôp b√†i t·∫≠p th√†nh c√¥ng.");
        setIsSubmitModalOpen(false);
        setSubmittingAssignment(null);
        setSubmitFile(null);
      } else {
        toast.info("N·ªôp b√†i t·∫≠p th·∫•t b·∫°i. Vui l√≤ng n·ªôp l·∫°i.");
      }
    } catch (err) {
      toast.error("L·ªói khi n·ªôp b√†i t·∫≠p.");
    }
  };

  // T·∫°o v√† t·∫£i file PDF ch·ª©a th√¥ng tin chi ti·∫øt b√†i t·∫≠p
  const handleDownloadPDF = async () => {
    if (!contentRef.current) return;

    try {
      const canvas = await html2canvas(contentRef.current, { scale: 2 });
      const imgData = canvas.toDataURL("image/png");

      const pdf = new jsPDF({
        orientation: "portrait",
        unit: "mm",
        format: "a4",
      });

      const pageWidth = pdf.internal.pageSize.getWidth();
      const imgHeight = (canvas.height * pageWidth) / canvas.width;

      pdf.addImage(imgData, "PNG", 0, 0, pageWidth, imgHeight);
      pdf.save(`ChiTietBaiTap_${viewingAssignment?.id || "assignment"}.pdf`);
    } catch (error) {
      toast.error("L·ªói khi t·∫°o file PDF.");
    }
  };

  const columns = [
    {
      title: "üìå Ti√™u ƒë·ªÅ",
      dataIndex: "name",
      key: "title",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "üìå Ghi ch√∫",
      dataIndex: "note",
      key: "note",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "üìÅ File",
      dataIndex: "fileUrl",
      key: "fileUrl",
      render: (text, record) => {
        const fileUrl = `https://yourdomain.com/files/${record.assignmentFile}`;
        return (
          <a href={fileUrl} target="_blank" rel="noopener noreferrer">
            T·∫£i v·ªÅ
          </a>
        );
      },
    },
    {
      title: "üìÖ Ng√†y t·∫°o",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (createdAt) => (
        <span style={{ whiteSpace: "nowrap" }}>{formatDate(createdAt)}</span>
      ),
    },
    {
      title: (
        <div style={{ whiteSpace: "nowrap", fontWeight: 600 }}>‚öôÔ∏è H√†nh ƒë·ªông</div>
      ),
      render: (_, record) => (
        <Space wrap>
          <Tooltip title="Xem chi ti·∫øt">
            <Button
              icon={<EyeOutlined />}
              onClick={() => handleViewDetails(record)}
              type="primary"
              style={{ backgroundColor: "#1677ff", color: "#fff" }}
            >
              Xem chi ti·∫øt
            </Button>
          </Tooltip>

          <Tooltip title="N·ªôp b√†i">
            <Button
              icon={<FileAddOutlined />}
              onClick={() => handleOpenSubmitModal(record)}
              type="primary"
              style={{ backgroundColor: "#52c41a", color: "#fff" }}
            >
              N·ªôp b√†i
            </Button>
          </Tooltip>
        </Space>
      ),
    },
  ];

  return (
    <Card
      title="üìö Danh s√°ch b√†i t·∫≠p"
      style={{ maxWidth: 1000, margin: "auto", marginTop: 24 }}
    >
      <Table
        dataSource={assignments}
        columns={columns}
        rowKey="id"
        loading={loading}
        pagination={{ pageSize: 5 }}
      />

      {/* Modal xem chi ti·∫øt file */}
      <Modal
        title={`Xem chi ti·∫øt b√†i t·∫≠p: ${viewingAssignment?.name || ""}`}
        open={isViewModalOpen}
        onCancel={() => {
          setIsViewModalOpen(false);
          setViewingAssignment(null);
        }}
        footer={[
          <Button key="close" onClick={() => setIsViewModalOpen(false)}>
            ƒê√≥ng
          </Button>,
          viewingAssignment && (
            <Button
              key="download-pdf"
              type="primary"
              icon={<CloudDownloadOutlined />}
              onClick={handleDownloadPDF}
            >
              T·∫£i th√¥ng tin b√†i t·∫≠p (PDF)
            </Button>
          ),
        ]}
        width={500}
      >
        <div ref={contentRef} style={{ padding: 10 }}>
          <Paragraph>
            <Text strong>Ti√™u ƒë·ªÅ: </Text> {viewingAssignment?.name}
          </Paragraph>
          <Paragraph>
            <Text strong>Ghi ch√∫: </Text> {viewingAssignment?.note}
          </Paragraph>
        </div>
      </Modal>

      {/* Modal n·ªôp b√†i t·∫≠p */}
      <Modal
        title={`N·ªôp b√†i cho: ${submittingAssignment?.name || ""}`}
        open={isSubmitModalOpen}
        onCancel={() => {
          setIsSubmitModalOpen(false);
          setSubmittingAssignment(null);
          setSubmitFile(null);
        }}
        onOk={handleSubmitAssignment}
        okText="N·ªôp b√†i"
      >
        <Upload
          beforeUpload={(file) => {
            setSubmitFile(file);
            return false; // kh√¥ng t·ª± ƒë·ªông upload
          }}
          fileList={submitFile ? [submitFile] : []}
          onRemove={() => setSubmitFile(null)}
          maxCount={1}
        >
          <Button icon={<UploadOutlined />}>Ch·ªçn file n·ªôp b√†i</Button>
        </Upload>
      </Modal>
    </Card>
  );
};

export default MyCourseAssignments;
