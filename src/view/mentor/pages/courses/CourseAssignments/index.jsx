import {
  Card,
  Table,
  Button,
  Upload,
  Modal,
  Input,
  message,
  Space,
  Typography,
  Tooltip
} from "antd";
import { useState, useEffect } from "react";
import { UploadOutlined, PlusOutlined, EditOutlined, TeamOutlined, DeleteOutlined } from "@ant-design/icons";
import { useLocation, useParams } from "react-router-dom";
import assignmentApi from "../../../../../api/assignmentApi";
import { toast } from "react-toastify";
import { formatDate } from "../../../../../utils/helper/formatDate";

const { Text } = Typography;

const CourseAssignments = () => {
  const location = useLocation();
  const { id } = useParams(); // l·∫•y t·ª´ route param
  const courseId = location.state?.courseId || id;
  const [assignments, setAssignments] = useState([]);
  const [editingAssignment, setEditingAssignment] = useState(null);
  const [loading, setLoading] = useState(false);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [title, setTitle] = useState("");
  const [note, setNote] = useState("");
  const [file, setFile] = useState(null);

  useEffect(() => {
    if (courseId) fetchAssignments();
  }, [courseId]);

  console.log("CourseID ",courseId);
  

  const fetchAssignments = async () => {
    setLoading(true);
    try {
      const res = await assignmentApi.fetchAllAssignments(courseId);
      console.log("Assignment: ", res);
      setAssignments(res.data || []);
    } catch (err) {
      toast.error("L·ªói t·∫£i danh s√°ch b√†i t·∫≠p.");
    } finally {
      setLoading(false);
    }
  };

  const handleUpdate = (record) => {
    setEditingAssignment(record);
    setTitle(record.name);
    setNote(record.note || "");
    setFile(null); // Kh√¥ng t·ª± ƒë·ªông g√°n l·∫°i file
    setIsModalOpen(true);
  };

  const handleDeleted = async (record) => {
    try {
        await assignmentApi.deleteAssignment(record.id);
        toast.success("ƒê√£ x√≥a b√†i t·∫≠p.");
        fetchAssignments();
    } catch (err) {
        toast.error("X√≥a th·∫•t b·∫°i.");
    }
  };

  const handleAddAssignment = async () => {
    if (!title) return toast.warning("Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ.");

    const formData = new FormData();
    formData.append("name", title);
    formData.append("note", note || "");
    formData.append("courseID", courseId);

    if (file) {
        formData.append("assignmentFile", file);
    }

    try {
        let res;
        if (editingAssignment) {
            res = await assignmentApi.updateAssignment(editingAssignment.id, formData);
            toast.success("C·∫≠p nh·∫≠t b√†i t·∫≠p th√†nh c√¥ng.");
        } else {
            res = await assignmentApi.addAssignment(formData);
            toast.success("Th√™m b√†i t·∫≠p th√†nh c√¥ng.");
        }

        if (res.data) {
            toast.success(editingAssignment ? "C·∫≠p nh·∫≠t b√†i t·∫≠p th√†nh c√¥ng." : "Th√™m b√†i t·∫≠p th√†nh c√¥ng.");
            setIsModalOpen(false);
            setTitle("");
            setNote("");
            setFile(null);
            setEditingAssignment(null);
            fetchAssignments();
        }
    } catch (err) {
        toast.error("L·ªói khi th√™m/c·∫≠p nh·∫≠t b√†i t·∫≠p.");
    }
  };


  const columns = [
    {
      title: "üìå Ti√™u ƒë·ªÅ",
      dataIndex: "name",
      key: "title",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "üìå Ghi ch√∫",
      dataIndex: "note",
      key: "note",
      render: (text) => <strong>{text}</strong>,
    },
    {
      title: "üìÅ File",
      dataIndex: "fileUrl",
      key: "fileUrl",
      render: (url) => (
        <a href={url} target="_blank" rel="noopener noreferrer">
          T·∫£i v·ªÅ
        </a>
      ),
    },
    {
      title: "üìÖ Ng√†y t·∫°o",
      dataIndex: "createdAt",
      key: "createdAt",
      render: (createdAt) => (
        <span style={{ whiteSpace: "nowrap" }}>
          {formatDate(createdAt)}
        </span>
      ),
    },
    {
      title: (
        <div style={{ whiteSpace: "nowrap", fontWeight: 600 }}>
          ‚öôÔ∏è H√†nh ƒë·ªông
        </div>
      ),
      render: (_, record) => (
        <Space wrap>
          <Tooltip title="C·∫≠p nh·∫≠t b√†i t·∫≠p">
            <Button
              icon={<EditOutlined />}
              onClick={() => handleUpdate(record)}
              type="primary"
            >
              C·∫≠p nh·∫≠t
            </Button>
          </Tooltip>

          <Tooltip title="X√≥a b√†i t·∫≠p">
            <Button
              icon={<DeleteOutlined />}
              type="primary"
              danger
              onClick={() => handleDeleted(record)}
            >
              X√≥a
            </Button>
          </Tooltip>
        </Space>
      ),
    },
  ];

  return (
    <Card
      title="üìö Danh s√°ch b√†i t·∫≠p"
      extra={
        <Button
          icon={<PlusOutlined />}
          type="primary"
          onClick={() => setIsModalOpen(true)}
        >
          Th√™m b√†i t·∫≠p
        </Button>
      }
      style={{ maxWidth: 1000, margin: "auto", marginTop: 24 }}
    >
      <Table
        dataSource={assignments}
        columns={columns}
        rowKey="id"
        loading={loading}
        pagination={{ pageSize: 5 }}
      />

      <Modal
        title={editingAssignment ? "‚úèÔ∏è C·∫≠p nh·∫≠t b√†i t·∫≠p" : "üìù Th√™m b√†i t·∫≠p m·ªõi"}
        open={isModalOpen}
        onCancel={() => {
            setIsModalOpen(false);
            setEditingAssignment(null);
            setTitle("");
            setNote("");
            setFile(null);
        }}
        onOk={handleAddAssignment}
        okText={editingAssignment ? "C·∫≠p nh·∫≠t" : "T·∫°o b√†i t·∫≠p"}
      >
        <Input
          placeholder="Nh·∫≠p ti√™u ƒë·ªÅ b√†i t·∫≠p"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          style={{ marginBottom: 16 }}
        />

        <Input
          placeholder="Nh·∫≠p ghi ch√∫"
          value={note}
          onChange={(e) => setNote(e.target.value)}
          style={{ marginBottom: 16 }}
        />

        <Upload
          beforeUpload={(file) => {
            setFile(file);
            return false;
          }}
          fileList={file ? [file] : []}
        >
          <Button icon={<UploadOutlined />}>Ch·ªçn file</Button>
        </Upload>
        {file && (
          <Text type="secondary" style={{ marginTop: 8, display: "block" }}>
            ƒê√£ ch·ªçn: {file.name}
          </Text>
        )}
      </Modal>
    </Card>
  );
};

export default CourseAssignments;
